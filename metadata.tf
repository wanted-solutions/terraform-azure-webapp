// Do not modify this file, it is generated by the wanted-solutions/template-terraform-module module and could be overwritten in the future updates.
locals {
  __definitions = {
    default_tags = {
      managed_by = "Terraform"
    }
    resource_timeouts = {
      default = {
        create = "30m"
        read   = "5m"
        update = "30m"
        delete = "30m"
      }
    }
    validator_error_messages = {
      default                     = "Unknown error during validation has occured."
      default_resource_tags_key   = "Resource tags key is not in valid format, please check your \"metadata\" object."
      default_resource_tags_value = "Resource tags value is not in valid format, please check your \"metadata\" object."
      resource_tags_key           = "Resource tags key is not in valid format, please check your \"tags\" object."
      resource_tags_value         = "Resource tags value is not in valid format, please check your \"tags\" object."
      timeout_key                 = "Timeout key is not valid, please check your \"metadata\" object, only \"create\", \"read\", \"update\" and \"delete\" can be used as metadata key value."
      timeout_value               = "Timeout value is not in valid format, please check your \"metadata\" object."
    }
    validator_expressions = {
      default             = ".*"
      resource_tags_key   = "^[a-zA-Z0-9_\\-\\.]{1,512}$"
      resource_tags_value = "^.{1,256}$"
      timeout_key         = "^(create|read|update|delete)$"
      timeout_value       = "^[0-9]+[smh]$"
    }
  }
  metadata = {
    default_tags = merge(
      local.__definitions.default_tags,
      lookup(local.module_metadata, "default_tags", {}),
      var.metadata.default_tags
    )
    resource_timeouts = merge(
      local.__definitions.resource_timeouts,
      lookup(local.module_metadata, "resource_timeouts", {}),
      var.metadata.resource_timeouts
    )
    validator_error_messages = merge(
      local.__definitions.validator_error_messages,
      lookup(local.module_metadata, "resource_timeouts", {}),
      var.metadata.validator_error_messages
    )
    validator_expressions = merge(
      local.__definitions.validator_expressions,
      lookup(local.module_metadata, "resource_timeouts", {}),
      var.metadata.validator_expressions
    )
  }
  tags = merge(local.metadata.default_tags, var.tags)
}
// Define the module input tags variable
variable "tags" {
  description = "Key value pairs of custom tags to be applied to the module resources."
  type        = map(string)
  default     = {}

  // Resource tags value validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.tags : [
          can(
            regex(
              lookup(
                local.metadata.validator_expressions,
                "resource_tags_value",
                local.metadata.validator_expressions["default"]
              ),
              value
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.metadata.validator_error_messages,
      "resource_tags_value",
      local.metadata.validator_error_messages["default"]
    )
  }
  // Resource tags key validation
  validation {
    condition = alltrue(
      flatten([
        for key, value in var.tags : [
          can(
            regex(
              lookup(
                local.metadata.validator_expressions,
                "resource_tags_key",
                local.metadata.validator_expressions["default"]
              ),
              key
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.metadata.validator_error_messages,
      "resource_tags_key",
      local.metadata.validator_error_messages["default"]
    )
  }
}
// Define the module input metadata variable
variable "metadata" {
  description = "Module metadata object to give user possibility to override default module values."
  type = object({
    default_tags             = optional(map(string), {})
    resource_timeouts        = optional(map(map(string)), {})
    validator_error_messages = optional(map(string), {})
    validator_expressions    = optional(map(string), {})
  })
  default = {}
  // Timeout values validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.metadata.resource_timeouts : [
          for timeout in value : timeout != null
          ? can(
            regex(
              lookup(
                local.__definitions.validator_expressions,
                "timeout_value",
                local.__definitions.validator_expressions["default"]
              ),
              timeout
            )
          )
          : true
        ]
      ])
    )
    error_message = lookup(
      local.__definitions.validator_error_messages,
      "timeout_value",
      local.__definitions.validator_error_messages["default"]
    )
  }
  // Timeout keys validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.metadata.resource_timeouts : [
          for key, timeout in value : timeout != null
          ? can(
            regex(
              lookup(
                local.__definitions.validator_expressions,
                "timeout_key",
                local.__definitions.validator_expressions["default"]
              ),
              key
            )
          )
          : true
        ]
      ])
    )
    error_message = lookup(
      local.__definitions.validator_error_messages,
      "timeout_key",
      local.__definitions.validator_error_messages["default"]
    )
  }
  // Default tags value validation
  validation {
    condition = alltrue(
      flatten([
        for value in var.metadata.default_tags : [
          can(
            regex(
              lookup(
                local.__definitions.validator_expressions,
                "resource_tags_value",
                local.__definitions.validator_expressions["default"]
              ),
              value
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.__definitions.validator_error_messages,
      "default_resource_tags_value",
      local.__definitions.validator_error_messages["default"]
    )
  }
  // Default tags key validation
  validation {
    condition = alltrue(
      flatten([
        for key, value in var.metadata.default_tags : [
          can(
            regex(
              lookup(
                local.__definitions.validator_expressions,
                "resource_tags_key",
                local.__definitions.validator_expressions["default"]
              ),
              key
            )
          )
        ]
      ])
    )
    error_message = lookup(
      local.__definitions.validator_error_messages,
      "default_resource_tags_key",
      local.__definitions.validator_error_messages["default"]
    )
  }
}